function [temp_array]  =  hamburger(nx, ny, nz, Tgrill, duration, timestep)
% 
% DESCRIPTION
%     Simulate a hamburger being cooked from a frozen temperature.
% 
% PARAMETERS
% 
%     nx                  is the number of sections in the
%                             X-direction 
% 
%     ny                  is the number of sections in the
%                             Y-direction 
% 
%     nz                  is the number of sections in the
%                             Z-direction 
% 
%     Tgrill              is the temperature of the grill
%                                 (Celsius) 
% 
%     duration            is the time the hamburger is on the grill
%                                 (seconds)
% 
%     timestep            is the timestep used in calculations
%                                 (seconds)
%        
%                             
% RETURNS
% 
%     temp_array          is an array of nx-by-ny-by-nz elements,
%                             with the final temperature
%                             for each location in the patty
%                               (in degrees Celcius)
% 
% AUTHOR
%     Kevin Granger <kmg2728@rit.edu>
%     2013-02-01

%{
Additional Documentation:

CALCULATIONS
    
    All calculations are done in Celcius, unless shown otherwise and
    converted.

    If there are calculations in loops that require multiplication or
    division of any constants, then that operation will be done outside of
    the loop.


VARIABLE NAMING CONVENTIONS / COORDINATE SYSTEMS / LOOP HANDLING

    The program uses I/X, J/Y, K/Z almost interchangeably.

    A right-handed coordinate system is used, with the grill existing in
    the XY plane.

    The hamburger is seen from the side of the grill, with the positive X/I
    direction going towards the observer, the positive Y/J direction going
    to the right of the observer, and the positive Z/K direction being
    "up".

    The sides of the burger are defined and abbreviated as follows:

    +K   (T)OP
    -K   (B)OTTOM
    +I   (F)RONT
    -I  B(A)CK
    -J   (L)EFT
    +J   (R)IGHT

    As seen from the side:

    OooooO
    oxxxxo
    oxxxxo
    oxxxxo
    oxxxxo
    oxxxxo
    ######

    O = corner (3 exposed sides, 3 touching)
    o = edge (1 exposed side, 5 touching)
    x = regular surrounded piece (no exposed sides, all 6 touching)

    The program will calculate all regular surrounded pieces, then all
    edges, then all corners.
%}


%% STARTUP


% Check starting values :

% Physical
assert( Tgrill >= 0, ...
    'The grill should probably be heated up *hotter* than the frozen meat. Please use a temperature above zero degrees celcius.');
assert( min([nx ny nz]) > 0 && max(rem([nx ny nz],1)) == 0,...
    'You must give a positive, nonzero, integer number of sections for each dimension of the burger.')
% Temporal
assert(duration >= timestep,...
    'Your duration must be greater than your timestep.');
assert(duration > 0,...
    'Your duration must be positive and nonzero.');
assert(timestep > 0, 'Your timestep must be positive and nonzero.');
   

% Constants

COND = 0.5; % thermal conductivity, J/(s*m*degC)
global DENS;
DENS = 950; % density, kg/m^3
global SPECHEAT;
SPECHEAT = 3000; % specific heat, J/(kg*degC)
global DIFFUS;
DIFFUS = 1.75E-7; % diffusivity, m^2/s

% Piece Size: take the length/width/height, and divide it by the number of
% divisions in that dimension.
PIECE_SIZE = [ ( 0.15 ./ [nx ny] ) ( 0.01 / nz ) ]; % also serves as dist.
% Piece Size Squared... is piece size, squared.
PIECE_SIZE_SQ = PIECE_SIZE .^ 2;
% The mass of one piece is the density times the volume (dx*dy*dz)
PIECE_MASS = DENS * prod(PIECE_SIZE);


% Populate Working Variables
% Z/K is nz+1 to make room for the grill at the bottom.
temp_array = zeros(nx,ny,nz+1); % fresh out of the freezer, 0 deg C.
temp_array(:,:,1) = Tgrill;
change_in_temp = zeros(nx,ny,nz+1);

warned_yet = false; % for the "values are exploding" warning

%% END STARTUP


for time=0:timestep:duration-timestep
    
old = temp_array;

%% MIDDLE

% The old iterative approach can be used here; the second difference.
for i=2:nx-1 % x
    for j=2:ny-1 % y
        for k=2:nz % z
            % nz, not nz - 1, because 1 = the grill, instead of an edge
            % piece. So while for x and y the "edge" is x = nx or y = ny,
            % the edge for z is z = nz + 1
            change_in_temp(i,j,k) = ...
                ( ( old(i+1,j,k) + old(i-1,j,k) - 2*old(i,j,k) ) ...
                / PIECE_SIZE_SQ(1) ) ...
                + ...
                ( ( old(i,j+1,k) + old(i,j-1,k) - 2*old(i,j,k) ) ...
                / PIECE_SIZE_SQ(2) ) ...
                + ...
                ( ( old(i,j,k+1) + old(i,j,k-1) - 2*old(i,j,k) ) ...
                / PIECE_SIZE_SQ(3) );
        end % z
    end % y
end % x

change_in_temp(2:end-1,2:end-1,2:end-1) = ...
    change_in_temp(2:end-1,2:end-1,2:end-1) .* DIFFUS;
                
%% END MIDDLE

%{
For each piece after this, the loops will take the following format:

(Pseudocode)

FIXED DIMENSION(S)
[POSSIBLE ADDITIONAL FIXED DIMENSIONS]

LOOP over non-fixed dimensions
    Change of temperature for each element for this given part = 

    ( this is the starting parenthesis for the overall heat

    (
    Area of the face for the X direction
    TIMES
    (
    spatial heat flow OR radiative heat flow from the -X direction
    PLUS
    spatial heat flow OR radiative heat flow from the +X direction
    )
    )

    PLUS

    (
    Area of the face for the Y direction
    TIMES
    (
    spatial heat flow OR radiative heat flow from the -Y direction
    ...
    ...
    etc.
END LOOP

Change of temperature for each element for this given part
TIMES / DIVIDED BY
[CONSTANTS]

(End Pseudocode)

Expressed mathematically:

Change in temp for one piece =
( ( A_x * (Q_-x + Q_+x) ) + ( A_y * (Q_-y + ... ... ) (* OR /) CONSTANTS
%}


%% INNER SIDES
% For each piece, take spatial heat flow from 5 meat-touching sides, then
% the 1 radiative flow from the exposed piece

% (T)OP (K fixed at end/nz+1, +K is exposed)
k = size(old,3); % Setting once, here, makes it easier to change & read.
for i=2:nx-1 % x
    for j=2:ny-1 % y

        change_in_temp(i,j,k) = ...
            ( ... % overall heat added for segment
            ...
            ...
            ... % X direction
            ( prod(PIECE_SIZE(2:3)) * ...
            ...
            ( spatial_heat_flow(old(i,j,k),old(i-1,j,k),PIECE_SIZE(1)) ...
            + spatial_heat_flow(old(i,j,k),old(i+1,j,k),PIECE_SIZE(1)))...
            )...
            ...
            + ... % Y dir
            ( prod(PIECE_SIZE([1 3])) * ...
            ...
            ( spatial_heat_flow(old(i,j,k),old(i,j-1,k),PIECE_SIZE(2)) ...
            + spatial_heat_flow(old(i,j,k),old(i,j+1,k),PIECE_SIZE(2)))...
            )...
            ...
            + ... % Z dir
            ( prod(PIECE_SIZE(1:2)) * ...
            ...
            ( spatial_heat_flow(old(i,j,k),old(i,j,k-1),PIECE_SIZE(3)) ...
            + radiate(old(i,j,k)))...
            )...
            );  
    end
end
        
change_in_temp(2:end-1,2:end-1,k) = ...
    change_in_temp(2:end-1,2:end-1,k) ./ ( SPECHEAT * PIECE_MASS );

% (B)OTTOM is touching grill, does not need radiative work.

% (F)RONT (I fixed at end, +I exposed)
i = size(old,1); % habit and cleaner code.
for j=2:ny-1 % y
    for k=2:(size(old,3)-1) % z
        change_in_temp(i,j,k) = ...
            ( ... % overall heat added for segment
            ...
            ...
            ... % X direction
            ( prod(PIECE_SIZE(2:3)) * ...
            ...
            ( spatial_heat_flow(old(i,j,k),old(i-1,j,k),PIECE_SIZE(1)) ...
            + radiate(old(i,j,k)))...
            )...
            ...
            + ... % Y dir
            ( prod(PIECE_SIZE([1 3])) * ...
            ...
            ( spatial_heat_flow(old(i,j,k),old(i,j-1,k),PIECE_SIZE(2)) ...
            + spatial_heat_flow(old(i,j,k),old(i,j+1,k),PIECE_SIZE(2)))...
            )...
            ...
            + ... % Z dir
            ( prod(PIECE_SIZE(1:2)) * ...
            ...
            ( spatial_heat_flow(old(i,j,k),old(i,j,k-1),PIECE_SIZE(3)) ...
            + spatial_heat_flow(old(i,j,k),old(i,j,k+1),PIECE_SIZE(3)))...
            )...
            );  
    end
end

change_in_temp(i,2:end-1,2:end-1) = ...
    change_in_temp(i,2:end-1,2:end-1) ./ ( SPECHEAT * PIECE_MASS );


%B(A)CK (I fixed at 1, -I exposed)

i = 1;
for j=2:ny-1 % y
    for k=2:(size(old,3)-1) % z
        change_in_temp(i,j,k) = ...
            ( ... % overall heat added for segment
            ...
            ...
            ... % X direction
            ( prod(PIECE_SIZE(2:3)) * ...
            ...
            ( radiate(old(i,j,k)) ...
            + spatial_heat_flow(old(i,j,k),old(i+1,j,k),PIECE_SIZE(1)))...
            )...
            ...
            + ... % Y dir
            ( prod(PIECE_SIZE([1 3])) * ...
            ...
            ( spatial_heat_flow(old(i,j,k),old(i,j-1,k),PIECE_SIZE(2)) ...
            + spatial_heat_flow(old(i,j,k),old(i,j+1,k),PIECE_SIZE(2)))...
            )...
            ...
            + ... % Z dir
            ( prod(PIECE_SIZE(1:2)) * ...
            ...
            ( spatial_heat_flow(old(i,j,k),old(i,j,k-1),PIECE_SIZE(3)) ...
            + spatial_heat_flow(old(i,j,k),old(i,j,k+1),PIECE_SIZE(3)))...
            )...
            );  
    end
end

change_in_temp(i,2:end-1,2:end-1) = ...
    change_in_temp(i,2:end-1,2:end-1) ./ ( SPECHEAT * PIECE_MASS );

%(L)EFT (J fixed at 1, -J exposed)
j = 1;
for i=2:nx-1 % x
    for k=2:(size(old,3)-1) % z
        change_in_temp(i,j,k) = ...
            ( ... % overall heat added for segment
            ...
            ...
            ... % X direction
            ( prod(PIECE_SIZE(2:3)) * ...
            ...
            ( spatial_heat_flow(old(i,j,k),old(i-1,j,k),PIECE_SIZE(1)) ...
            + spatial_heat_flow(old(i,j,k),old(i+1,j,k),PIECE_SIZE(1)))...
            )...
            ...
            + ... % Y dir
            ( prod(PIECE_SIZE([1 3])) * ...
            ...
            ( radiate(old(i,j,k)) ...
            + spatial_heat_flow(old(i,j,k),old(i,j+1,k),PIECE_SIZE(2)))...
            )...
            ...
            + ... % Z dir
            ( prod(PIECE_SIZE(1:2)) * ...
            ...
            ( spatial_heat_flow(old(i,j,k),old(i,j,k-1),PIECE_SIZE(3)) ...
            + spatial_heat_flow(old(i,j,k),old(i,j,k+1),PIECE_SIZE(3)))...
            )...
            );  
    end
end

change_in_temp(2:end-1,j,2:end-1) = ...
    change_in_temp(2:end-1,j,2:end-1) ./ ( SPECHEAT * PIECE_MASS );

%(R)IGHT (J fixed at end, +J exposed)
j = size(old,2);
for i=2:nx-1 % x
    for k=2:(size(old,3)-1) % z
        change_in_temp(i,j,k) = ...
            ( ... % overall heat added for segment
            ...
            ...
            ... % X direction
            ( prod(PIECE_SIZE(2:3)) * ...
            ...
            ( spatial_heat_flow(old(i,j,k),old(i-1,j,k),PIECE_SIZE(1)) ...
            + spatial_heat_flow(old(i,j,k),old(i+1,j,k),PIECE_SIZE(1)))...
            )...
            ...
            + ... % Y dir
            ( prod(PIECE_SIZE([1 3])) * ...
            ...
            ( spatial_heat_flow(old(i,j,k),old(i,j-1,k),PIECE_SIZE(2)) ...
            + radiate(old(i,j,k)))...
            )...
            ...
            + ... % Z dir
            ( prod(PIECE_SIZE(1:2)) * ...
            ...
            ( spatial_heat_flow(old(i,j,k),old(i,j,k-1),PIECE_SIZE(3)) ...
            + spatial_heat_flow(old(i,j,k),old(i,j,k+1),PIECE_SIZE(3)))...
            )...
            );  
    end
end

change_in_temp(2:end-1,j,2:end-1) = ...
    change_in_temp(2:end-1,j,2:end-1) ./ ( SPECHEAT * PIECE_MASS );

%% END INNER SIDES

%% EDGES
% TR
j = size(old,2);
k = size(old,3); 
for i=2:size(old,1)-1

    change_in_temp(i,j,k) = ...
        ( ... % overall heat added for segment
        ...
        ...
        ... % X direction
        ( prod(PIECE_SIZE(2:3)) * ...
        ...
        ( spatial_heat_flow(old(i,j,k),old(i-1,j,k),PIECE_SIZE(1)) ...
        + spatial_heat_flow(old(i,j,k),old(i+1,j,k),PIECE_SIZE(1)))...
        )...
        ...
        + ... % Y dir
        ( prod(PIECE_SIZE([1 3])) * ...
        ...
        ( spatial_heat_flow(old(i,j,k),old(i,j-1,k),PIECE_SIZE(2)) ...
        + radiate(old(i,j,k)))...
        )...
        ...
        + ... % Z dir
        ( prod(PIECE_SIZE(1:2)) * ...
        ...
        ( spatial_heat_flow(old(i,j,k),old(i,j,k-1),PIECE_SIZE(3)) ...
        + radiate(old(i,j,k)))...
        )...
        );  
end
        
change_in_temp(2:end-1,j,k) = ...
    change_in_temp(2:end-1,j,k) ./ ( SPECHEAT * PIECE_MASS );


% TL
j = 1;
k = size(old,3); 
for i=2:size(old,1)-1

    change_in_temp(i,j,k) = ...
        ( ... % overall heat added for segment
        ...
        ...
        ... % X direction
        ( prod(PIECE_SIZE(2:3)) * ...
        ...
        ( spatial_heat_flow(old(i,j,k),old(i-1,j,k),PIECE_SIZE(1)) ...
        + spatial_heat_flow(old(i,j,k),old(i+1,j,k),PIECE_SIZE(1)))...
        )...
        ...
        + ... % Y dir
        ( prod(PIECE_SIZE([1 3])) * ...
        ...
        ( radiate(old(i,j,k)) ...
        + spatial_heat_flow(old(i,j,k),old(i,j+1,k),PIECE_SIZE(2)))...
        )...
        ...
        + ... % Z dir
        ( prod(PIECE_SIZE(1:2)) * ...
        ...
        ( spatial_heat_flow(old(i,j,k),old(i,j,k-1),PIECE_SIZE(3)) ...
        + radiate(old(i,j,k)))...
        )...
        );  
end
        
change_in_temp(2:end-1,j,k) = ...
    change_in_temp(2:end-1,j,k) ./ ( SPECHEAT * PIECE_MASS );


% TA
i = 1;
k = size(old,3); 
for j=2:size(old,2)-1

    change_in_temp(i,j,k) = ...
        ( ... % overall heat added for segment
        ...
        ...
        ... % X direction
        ( prod(PIECE_SIZE(2:3)) * ...
        ...
        ( radiate(old(i,j,k)) ...
        + spatial_heat_flow(old(i,j,k),old(i+1,j,k),PIECE_SIZE(1)))...
        )...
        ...
        + ... % Y dir
        ( prod(PIECE_SIZE([1 3])) * ...
        ...
        ( spatial_heat_flow(old(i,j,k),old(i,j-1,k),PIECE_SIZE(2)) ...
        + spatial_heat_flow(old(i,j,k),old(i,j+1,k),PIECE_SIZE(2)))...
        )...
        ...
        + ... % Z dir
        ( prod(PIECE_SIZE(1:2)) * ...
        ...
        ( spatial_heat_flow(old(i,j,k),old(i,j,k-1),PIECE_SIZE(3)) ...
        + radiate(old(i,j,k)))...
        )...
        );  
end
        
change_in_temp(i,2:end-1,k) = ...
    change_in_temp(i,2:end-1,k) ./ ( SPECHEAT * PIECE_MASS );


% TF
i = size(old,1);
k = size(old,3); 
for j=2:size(old,2)-1

    change_in_temp(i,j,k) = ...
        ( ... % overall heat added for segment
        ...
        ...
        ... % X direction
        ( prod(PIECE_SIZE(2:3)) * ...
        ...
        ( spatial_heat_flow(old(i,j,k),old(i-1,j,k),PIECE_SIZE(1)) ...
        + radiate(old(i,j,k)))...
        )...
        ...
        + ... % Y dir
        ( prod(PIECE_SIZE([1 3])) * ...
        ...
        ( spatial_heat_flow(old(i,j,k),old(i,j-1,k),PIECE_SIZE(2)) ...
        + spatial_heat_flow(old(i,j,k),old(i,j+1,k),PIECE_SIZE(2)))...
        )...
        ...
        + ... % Z dir
        ( prod(PIECE_SIZE(1:2)) * ...
        ...
        ( spatial_heat_flow(old(i,j,k),old(i,j,k-1),PIECE_SIZE(3)) ...
        + radiate(old(i,j,k)))...
        )...
        );  
end
        
change_in_temp(i,2:end-1,k) = ...
    change_in_temp(i,2:end-1,k) ./ ( SPECHEAT * PIECE_MASS );


% AR
j = size(old,2);
i = 1; 
for k=2:size(old,3)-1

    change_in_temp(i,j,k) = ...
        ( ... % overall heat added for segment
        ...
        ...
        ... % X direction
        ( prod(PIECE_SIZE(2:3)) * ...
        ...
        ( radiate(old(i,j,k)) ...
        + spatial_heat_flow(old(i,j,k),old(i+1,j,k),PIECE_SIZE(1)))...
        )...
        ...
        + ... % Y dir
        ( prod(PIECE_SIZE([1 3])) * ...
        ...
        ( spatial_heat_flow(old(i,j,k),old(i,j-1,k),PIECE_SIZE(2)) ...
        + radiate(old(i,j,k)))...
        )...
        ...
        + ... % Z dir
        ( prod(PIECE_SIZE(1:2)) * ...
        ...
        ( spatial_heat_flow(old(i,j,k),old(i,j,k-1),PIECE_SIZE(3)) ...
        + spatial_heat_flow(old(i,j,k),old(i,j,k+1),PIECE_SIZE(3)))...
        )...
        );  
end
        
change_in_temp(i,j,2:end-1) = ...
    change_in_temp(i,j,2:end-1) ./ ( SPECHEAT * PIECE_MASS );


% AL
j = 1;
i = 1; 
for k=2:size(old,3)-1

    change_in_temp(i,j,k) = ...
        ( ... % overall heat added for segment
        ...
        ...
        ... % X direction
        ( prod(PIECE_SIZE(2:3)) * ...
        ...
        ( radiate(old(i,j,k)) ...
        + spatial_heat_flow(old(i,j,k),old(i+1,j,k),PIECE_SIZE(1)))...
        )...
        ...
        + ... % Y dir
        ( prod(PIECE_SIZE([1 3])) * ...
        ...
        ( radiate(old(i,j,k)) ...
        + spatial_heat_flow(old(i,j,k),old(i,j+1,k),PIECE_SIZE(2)))...
        )...
        ...
        + ... % Z dir
        ( prod(PIECE_SIZE(1:2)) * ...
        ...
        ( spatial_heat_flow(old(i,j,k),old(i,j,k-1),PIECE_SIZE(3)) ...
        + spatial_heat_flow(old(i,j,k),old(i,j,k+1),PIECE_SIZE(3)))...
        )...
        );  
end
        
change_in_temp(i,j,2:end-1) = ...
    change_in_temp(i,j,2:end-1) ./ ( SPECHEAT * PIECE_MASS );


% FR
j = size(old,2);
i = size(old,1); 
for k=2:size(old,3)-1

    change_in_temp(i,j,k) = ...
        ( ... % overall heat added for segment
        ...
        ...
        ... % X direction
        ( prod(PIECE_SIZE(2:3)) * ...
        ...
        ( spatial_heat_flow(old(i,j,k),old(i-1,j,k),PIECE_SIZE(1)) ...
        + radiate(old(i,j,k)))...
        )...
        ...
        + ... % Y dir
        ( prod(PIECE_SIZE([1 3])) * ...
        ...
        ( spatial_heat_flow(old(i,j,k),old(i,j-1,k),PIECE_SIZE(2)) ...
        + radiate(old(i,j,k)))...
        )...
        ...
        + ... % Z dir
        ( prod(PIECE_SIZE(1:2)) * ...
        ...
        ( spatial_heat_flow(old(i,j,k),old(i,j,k-1),PIECE_SIZE(3)) ...
        + spatial_heat_flow(old(i,j,k),old(i,j,k+1),PIECE_SIZE(3)))...
        )...
        );  
end
        
change_in_temp(i,j,2:end-1) = ...
    change_in_temp(i,j,2:end-1) ./ ( SPECHEAT * PIECE_MASS );


% FL
j = 1;
i = size(old,1); 
for k=2:size(old,3)-1

    change_in_temp(i,j,k) = ...
        ( ... % overall heat added for segment
        ...
        ...
        ... % X direction
        ( prod(PIECE_SIZE(2:3)) * ...
        ...
        ( spatial_heat_flow(old(i,j,k),old(i-1,j,k),PIECE_SIZE(1)) ...
        + radiate(old(i,j,k)))...
        )...
        ...
        + ... % Y dir
        ( prod(PIECE_SIZE([1 3])) * ...
        ...
        ( radiate(old(i,j,k)) ...
        + spatial_heat_flow(old(i,j,k),old(i,j+1,k),PIECE_SIZE(2)))...
        )...
        ...
        + ... % Z dir
        ( prod(PIECE_SIZE(1:2)) * ...
        ...
        ( spatial_heat_flow(old(i,j,k),old(i,j,k-1),PIECE_SIZE(3)) ...
        + spatial_heat_flow(old(i,j,k),old(i,j,k+1),PIECE_SIZE(3)))...
        )...
        );  
end
        
change_in_temp(i,j,2:end-1) = ...
    change_in_temp(i,j,2:end-1) ./ ( SPECHEAT * PIECE_MASS );

%% END EDGES

%% TOP CORNERS

% These all follow a similar format to above, but since for each operation
% all three dimensions are fixed, the constant multiplication is done
% inline.
% Also, k is set once at the beginning and not changed, since we're only
% operating on the top here.

k=size(old,3);

% AL
i=1;
j=1;
change_in_temp(i,j,k) = ...
        ( ... % overall heat added for segment
        ...
        ...
        ... % X direction
        ( prod(PIECE_SIZE(2:3)) * ...
        ...
        ( radiate(old(i,j,k)) ...
        + spatial_heat_flow(old(i,j,k),old(i+1,j,k),PIECE_SIZE(1)))...
        )...
        ...
        + ... % Y dir
        ( prod(PIECE_SIZE([1 3])) * ...
        ...
        ( radiate(old(i,j,k)) ...
        + spatial_heat_flow(old(i,j,k),old(i,j+1,k),PIECE_SIZE(2)))...
        )...
        ...
        + ... % Z dir
        ( prod(PIECE_SIZE(1:2)) * ...
        ...
        ( radiate(old(i,j,k)) ...
        + spatial_heat_flow(old(i,j,k),old(i,j,k-1),PIECE_SIZE(3)))...
        )...
        ) ./ ( SPECHEAT * PIECE_MASS );


% AR
i=1;
j=size(old,2);
change_in_temp(i,j,k) = ...
        ( ... % overall heat added for segment
        ...
        ...
        ... % X direction
        ( prod(PIECE_SIZE(2:3)) * ...
        ...
        ( radiate(old(i,j,k)) ...
        + spatial_heat_flow(old(i,j,k),old(i+1,j,k),PIECE_SIZE(1)))...
        )...
        ...
        + ... % Y dir
        ( prod(PIECE_SIZE([1 3])) * ...
        ...
        ( spatial_heat_flow(old(i,j,k),old(i,j-1,k),PIECE_SIZE(2)) ...
        + radiate(old(i,j,k)))...
        )...
        ...
        + ... % Z dir
        ( prod(PIECE_SIZE(1:2)) * ...
        ...
        ( spatial_heat_flow(old(i,j,k),old(i,j,k-1),PIECE_SIZE(3)) ...
        + radiate(old(i,j,k)))...
        )...
        )./ ( SPECHEAT * PIECE_MASS );


% FL
i=size(old,1);
j=1;
change_in_temp(i,j,k) = ...
        ( ... % overall heat added for segment
        ...
        ...
        ... % X direction
        ( prod(PIECE_SIZE(2:3)) * ...
        ...
        ( spatial_heat_flow(old(i,j,k),old(i-1,j,k),PIECE_SIZE(1)) ...
        + radiate(old(i,j,k)))...
        )...
        ...
        + ... % Y dir
        ( prod(PIECE_SIZE([1 3])) * ...
        ...
        ( radiate(old(i,j,k)) ...
        + spatial_heat_flow(old(i,j,k),old(i,j+1,k),PIECE_SIZE(2)))...
        )...
        ...
        + ... % Z dir
        ( prod(PIECE_SIZE(1:2)) * ...
        ...
        ( spatial_heat_flow(old(i,j,k),old(i,j,k-1),PIECE_SIZE(3)) ...
        + radiate(old(i,j,k)))...
        )...
        )./ ( SPECHEAT * PIECE_MASS );

    
% FR
i=size(old,1);
j=size(old,2);
change_in_temp(i,j,k) = ...
        ( ... % overall heat added for segment
        ...
        ...
        ... % X direction
        ( prod(PIECE_SIZE(2:3)) * ...
        ...
        ( spatial_heat_flow(old(i,j,k),old(i-1,j,k),PIECE_SIZE(1)) ...
        + radiate(old(i,j,k)))...
        )...
        ...
        + ... % Y dir
        ( prod(PIECE_SIZE([1 3])) * ...
        ...
        ( spatial_heat_flow(old(i,j,k),old(i,j-1,k),PIECE_SIZE(2)) ...
        + radiate(old(i,j,k)))...
        )...
        ...
        + ... % Z dir
        ( prod(PIECE_SIZE(1:2)) * ...
        ...
        ( spatial_heat_flow(old(i,j,k),old(i,j,k-1),PIECE_SIZE(3)) ...
        + radiate(old(i,j,k)))...
        )...
        )./ ( SPECHEAT * PIECE_MASS );

    
%% END CORNERS


% multiply all by timestep
change_in_temp(:,:,2:end) = ...
    change_in_temp(:,:,2:end) .* timestep;
    
% check for errors in value
if (~warned_yet) && (abs(max(max(max(change_in_temp)))) > Tgrill)
        warning('VALUES ARE BLOWING UP');
        warned_yet = true;
end

% change the actual temperature
temp_array = temp_array + change_in_temp;

    
end % time

% trim the grill out of the matix before returning it
temp_array = temp_array(:,:,2:end);



end % main hamburger function


function [qpera] = radiate(Tint)
%
% ARGUMENTS
% 
%     Tint     The internal temperature of the radiating body,
%                  in degrees Celcius.
%                 
% RETURNS
% 
%     qpera    The rate of heat flow per square meter (J/m^2)


STFB = 5.67E-8; % stefan-boltzmann constant
CTOKEL = 273.15; %C to Kelvin by adding. Kelvin to C by subtracting.
TEXT = 20 + CTOKEL; % external temperature, 20 degrees Celcius.
Tint = Tint + CTOKEL;

qpera = (TEXT^4 - Tint^4) * STFB;

end % radiate function


function [qpera] = spatial_heat_flow(Tcurr, Tcomp, distance)
% 
% ARGUMENTS
% 
%     Tcurr     The temperature of the "current" piece in either degrees
%                     Celcius or in Kelvin.
%     Tcomp     The temperature of the piece to compare against the
%                   "current" piece. In degrees Celcius or in Kelvin.
%                   
% (Since we are using the difference between these two temperatures, either
% degrees C or Kelvin works.)
% 
% RETURNS
% 
%     qpera     The rate of heat flow per square meter (J/m^2)

global DENS;
global SPECHEAT;
global DIFFUS;

qpera = - DIFFUS * DENS * SPECHEAT * ( (Tcurr-Tcomp) / distance ) ;

end % spatial heat flow function